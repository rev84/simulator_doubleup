// Generated by CoffeeScript 1.12.7
var addLine, c2img, c2p, decideUpper, go, init, makeDeck, rand, result, shuffle, start, totalTimes, updateAverage, updateLine, updateP;

window.maxCount = 1;

window.timerContinue = false;

window.times = {};

window.historyMin = 0;

$().ready(function() {
  $('#start').on('click', start);
  return init();
});

init = function() {
  addLine('total', '合計');
  return addLine(0);
};

start = function() {
  window.timerContinue = !window.timerContinue;
  $('#start').html(window.timerContinue ? 'ストップ' : 'スタート');
  return go();
};

go = function() {
  var baseCard, cnt, count, decide, deck, history, j, ref, ref1, res, targetCard;
  if (!window.timerContinue) {
    return;
  }
  deck = makeDeck();
  baseCard = deck.pop();
  count = 0;
  history = [baseCard];
  while (true) {
    targetCard = deck.pop();
    decide = decideUpper(baseCard);
    history.push(decide ? '▲' : '▼');
    res = result(baseCard, targetCard, decide);
    history.push(targetCard);
    if (res === 'draw') {
      continue;
    } else if (!res) {
      break;
    }
    count++;
    baseCard = targetCard;
  }
  if (window.maxCount <= count) {
    for (cnt = j = ref = window.maxCount, ref1 = count; ref <= ref1 ? j <= ref1 : j >= ref1; cnt = ref <= ref1 ? ++j : --j) {
      addLine(cnt);
    }
    window.maxCount = count + 1;
  }
  window.times[count]++;
  updateLine(count, history);
  updateP();
  updateAverage();
  return setTimeout(go, 1);
};

totalTimes = function() {
  var key, ref, t, value;
  t = 0;
  ref = window.times;
  for (key in ref) {
    value = ref[key];
    t += Number(value);
  }
  return t;
};

decideUpper = function(baseCard) {
  return c2p(baseCard) <= 5;
};

result = function(baseCard, targetCard, decide) {
  if (c2p(baseCard) === c2p(targetCard)) {
    return 'draw';
  }
  return (c2p(baseCard) < c2p(targetCard) && decide) || (c2p(baseCard) > c2p(targetCard) && !decide);
};

updateAverage = function() {
  var avg, total;
  total = totalTimes();
  avg = 0;
  $('tr.count').each(function() {
    return avg += Number($(this).find('td').eq(0).html().replace(/\,/g, '')) * (Number($(this).find('td').eq(1).html().replace(/\,/g, '')) / total);
  });
  return $('tr#line_total').find('td').eq(0).html(Math.floor(avg).toLocaleString());
};

updateP = function() {
  var total;
  total = totalTimes();
  $('tr#line_total').find('td').eq(1).html(total.toLocaleString());
  return $('tr.count').each(function() {
    var id;
    id = $(this).find('th').eq(0).html();
    if (window.times[id] != null) {
      $(this).find('td').eq(1).html(window.times[id].toLocaleString());
      return $(this).find('td').eq(2).html(sprintf('%.2f', window.times[id] / total * 100) + '%');
    }
  });
};

updateLine = function(count, history) {
  return $('tr#line_' + count + ' td').eq(3).html(count === 'total' || count < window.historyMin ? '' : (history.map(function(v) {
    if (v === '▲' || v === '▼') {
      return v;
    } else {
      return '<img class="card" src="' + c2img(v) + '">';
    }
  })).join(''));
};

addLine = function(count, title) {
  var id, tr;
  if (title == null) {
    title = null;
  }
  id = 'line_' + count;
  if ($('tr#' + id).length > 0) {
    return;
  }
  title = title === null ? count : title;
  tr = $('<tr>').addClass(count === 'total' ? '' : 'count').attr('id', id).append($('<th>').addClass('right').html(title)).append($('<td>').addClass('right').html(count === 'total' ? '-' : count === 0 ? 0 : (Math.pow(2, count - 1)).toLocaleString())).append($('<td>').addClass('right')).append($('<td>').addClass('right')).append($('<td>'));
  $('tbody').append(tr);
  return window.times[count] = 0;
};

c2p = function(c) {
  if (52 <= c) {
    return 13;
  } else {
    return c % 13;
  }
};

c2img = function(c) {
  var img, nums;
  if (52 <= c) {
    return './img/jk0.png';
  }
  nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1];
  img = './img/';
  img += (function() {
    switch (Math.floor(c / 13)) {
      case 0:
        return 'c';
      case 1:
        return 'd';
      case 2:
        return 'h';
      case 3:
        return 's';
    }
  })();
  return img += sprintf('%02d', nums[c % 13]) + '.png';
};

makeDeck = function() {
  var deck, index, j;
  deck = [];
  for (index = j = 0; j < 54; index = ++j) {
    deck.push(index);
  }
  return shuffle(deck);
};

shuffle = function(ary) {
  var i, n, ref;
  n = ary.length;
  while (n) {
    n--;
    i = this.rand(0, n);
    ref = [ary[n], ary[i]], ary[i] = ref[0], ary[n] = ref[1];
  }
  return ary;
};

rand = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};
